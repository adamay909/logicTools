package gentzen

func ltree(n *Node, simple bool) string {

	var lt func(n *Node) string

	disp := func(k *Node) string {
		if k.IsAtomic() {
			return k.StringLatex()
		}
		return k.MainConnective().Stringf(mLatex)
	}

	lt = func(m *Node) (r string) {
		if simple {
			r = `[ .\p{` + disp(m) + `} `
		} else {
			r = `[ .\p{` + Parse(m.String()).StringLatex() + `} `
		}
		if !m.IsAtomic() {

			r = r + lt(m.subnode1)

			if m.IsBinary() {
				r = r + lt(m.subnode2)
			}

			r = r + ` ] `
		} else {
			r = r + ` ] !{\qbalance} `
		}

		return r
	}

	return `%generated by gentzen` + "\n" + `\Tree ` + lt(n)

}

func LatexTree(n *Node) string {

	return ltree(n, false)

}
func LatexTreeSimple(n *Node) string {

	return ltree(n, true)

}
