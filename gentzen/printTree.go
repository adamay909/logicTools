package gentzen

import "strings"

func ltree(n *Node, simple bool) string {

	var lt func(n *Node) string

	disp := func(k *Node) string {
		if k.IsAtomic() {
			return k.StringLatex()
		}
		return k.MainConnective().Stringf(mLatex)
	}

	lt = func(m *Node) (r string) {
		if simple {
			r = `[ \p{` + disp(m) + `} `
		} else {
			r = `[ \p{` + Parse(m.String()).StringLatex() + `} `
		}
		r = r + "\n"

		if !m.IsAtomic() {

			r = r + lt(m.subnode1)

			if m.IsBinary() {
				r = r + lt(m.subnode2)
			}

		}
		r = r + ` ] ` + "\n" // !{\qbalance} `

		return r
	}

	templ := `\begin{forest}{for tree={grow=south}}
%generated by gentzen
DATA\end{forest}

`
	return strings.ReplaceAll(templ, `DATA`, lt(n))

}

func LatexTree(n *Node) string {

	return ltree(n, false)

}
func LatexTreeSimple(n *Node) string {

	return ltree(n, true)

}
